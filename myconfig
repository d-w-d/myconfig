#!/bin/bash
#
# Defines the main CLI function 'myconfig' for this project

# Define script-wide global vars
skip_confirmation=false

# Define aux functions
function _usage() {

    local msg=""
    msg+="${WHI}Usage: ${GRE}myconfig ${CYA}<command> [<args>]\n${WHI}"
    msg+="\n"
    msg+="${CYA}help                ${WHI}Print usage of myconfig\n${WHI}"
    msg+="${CYA}version             ${WHI}Print version\n${WHI}"
    msg+="${CYA}status              ${WHI}Shows installation status of myconfig\n${WHI}"
    msg+="${CYA}install [-y] <arg>  ${WHI}Install <arg> from source [confirmed]\n${WHI}"
    msg+="${CYA}update [-y]         ${WHI}Update myconfig [confirmed]\n${WHI}"
    echo -e "$msg"
}

function _install_usage() {

    local msg=""
    msg+="${WHI}Usage: ${GRE}myconfig install ${CYA}[-y] <command>${WHI}\n"
    msg+="\n"
    msg+="${CYA}self        ${WHI}Permanently install myconfig to ~/.myconfig${WHI}\n"
    msg+="${CYA}vim         ${WHI}Install vim 8.2 from source${WHI}\n"
    msg+="${CYA}tmux        ${WHI}Install tmux 3.1b from source${WHI}\n"
    msg+="${CYA}zsh         ${WHI}Install zsh 5.7.1 from source${WHI}\n"
    msg+="${CYA}prometheus  ${WHI}Install prometheus from source${WHI}\n"
    echo -e "$msg"
}

function _create_myfs() {

    if [[ -d $HOME/.myfs ]]; then
        echo -e "${RED}~/.myfs already exists"
        return 1
    else
        echo -e "${GRE}Creating ~/.myfs"
        local msg=""
        msg+="# What's This?\n"
        msg+=""
        msg+="This is a dir for a filesystem structure for building/installing "
        msg+="executables from source using the myconfig CLI"
        mkdir $HOME/.myfs && echo $msg >>$HOME/.myfs/README.md
    fi
}

function _update_myconfig() {

    # Exit if not fully installed
    if ! _is_myconfig_fully_installed; then
        echo -e "${RED}myconfig is not installed${WHI}"
        return 1
    fi

    # Exit if this is the "SSOT" repo
    if [[ -f $HOME/.myconfig/.SSOT ]]; then
        echo -e """${RED}
        This is the SSOT repo; it will NOT update via the myconfig LCI!
        ${WHI}"""
        return 1
    fi

    # Perform update from remote
    local previous_dir=$PWD
    cd $HOME/.myconfig/
    git fetch origin
    git checkout master
    git reset --hard origin/master
    cd $previous_dir

    # Update vundle plugins
    _update_or_install_vundle_plugins

    # Finish
    echo -e """${GRE}
    =================
    Update completed!
    =================
    ${WHI}"""

}

function _fully_install_myconfig() {

    if _is_myconfig_fully_installed; then
        echo -e "${RED}myconfig is already installed${WHI}"
        return 1
    fi

    if [[ $skip_confirmation == false ]]; then
        local msg=""
        msg+="${RED} Are you sure you want to install "
        msg+="myconfig to ${WHI}$HOME/.myconfig?${RED} (y/N)\n"
        echo -e "$msg"
        read choice
        # Exit unless choice is 'y' or 'Y'
        if [[ ! $choice =~ ^y$|^Y$ ]]; then
            echo -e "${RED}Exiting...${WHI}"
            return 1
        fi
    fi

    echo -e "${GRE}OK, let's fully install myconfig...${WHI}"
    sleep 2
    _create_myfs
    local previous_dir=$PWD
    cd $HOME
    git clone https://github.com/d-w-d/myconfig.git .myconfig
    cd $previous_dir

    ### Replace .rcfiles
    _replace_dotrc_files

    ### Unalias vim from \`alias vim="vim -N -u /tmp/myconfig/.vimrc"\`
    unalias vim 2>/dev/null

    ### Final message
    local msg=""
    msg+="${GRE}Installation complete! ${WHI}"
    msg+="${GRE}Run ${CYA}'source ~/.myconfig/entry.sh' ${WHI}"
    msg+="${GRE}to activate changes. ${WHI}"
    echo -e "$msg"
}

function _status() {

    local msg="${WHI}Myconfig status: \n${WHI}"

    # Test if myconfig is installed
    if _is_myconfig_fully_installed; then
        msg+="${GRE}✓ myconfig is fully installed\${WHI}"
    else
        msg+="${RED}✗ myconfig is NOT fully installed\n${WHI}"
    fi

    # Test if vim has been installed to .myfs
    if [[ $(which -a vim | grep $HOME/.myfs | wc -l) -gt 0 ]]; then
        msg+="${GRE}✓ myconfig > vim is installed\n${WHI}"
    else
        msg+="${RED}✗ myconfig > vim is NOT installed\n${WHI}"
    fi

    # Test if tmux has been installed to .myfs
    if [[ $(which -a tmux | grep $HOME/.myfs | wc -l) -gt 0 ]]; then
        msg+="${GRE}✓ myconfig > tmux is installed\n${WHI}"
    else
        msg+="${RED}✗ myconfig > tmux is NOT installed\n${WHI}"
    fi

    echo -e "$msg"
}

main() {

    ### Handle no args
    if [[ $# -eq 0 ]]; then
        _usage
        return 1
    fi

    ### Main Loop
    while [[ $# -gt 0 ]]; do
        arg1=$1
        shift # expose next argument
        case "$arg1" in
        "--help" | "help")
            _usage
            break
            ;;
        "--version" | "version")
            _version
            break
            ;;
        "--status" | "status")
            _status
            break
            ;;
        "update")
            _update_myconfig
            break
            ;;
        "install")
            # Handle no further install args
            [[ $# -eq 0 ]] && _install_usage && return 1

            # Handle further install args
            while [[ $# -gt 0 ]]; do
                arg2="$1"
                shift # expose next argument
                case "$arg2" in
                "--help" | "help")
                    _install_usage
                    break
                    ;;
                "-y")
                    skip_confirmation=true
                    ;;
                "self")
                    _fully_install_myconfig
                    break
                    ;;
                "vim")
                    if _is_myconfig_fully_installed; then
                        _install_vim
                    else
                        local msg=""
                        msg+="${RED}You must fully install myconfig ${WHI}"
                        msg+="${RED}before installing vim${WHI}"
                        echo -e "$msg"
                    fi
                    break
                    ;;
                "tmux")
                    if _is_myconfig_fully_installed; then
                        _install_tmux
                    else
                        local msg=""
                        msg+="${RED}You must fully install myconfig ${WHI}"
                        msg+="${RED}before installing tmux${WHI}"
                        echo -e "$msg"
                    fi
                    break
                    ;;
                "zsh")
                    if _is_myconfig_fully_installed; then
                        _install_zsh
                    else
                        local msg=""
                        msg+="${RED}You must fully install myconfig ${WHI}"
                        msg+="${RED}before installing zsh${WHI}"
                        echo -e "$msg"
                    fi
                    break
                    ;;
                *)
                    echo >&2 "Invalid option: $@"
                    echo "INSTALL CALLED BARE"
                    _install_usage
                    return 1
                    ;;
                esac
            done
            break
            ;;

        *)
            echo >&2 "Invalid option: $@"
            _usage
            return 1
            ;;
        esac
    done
}

### Execute main with all arguments passed to script
main "$@"
