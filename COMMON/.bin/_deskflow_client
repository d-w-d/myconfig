#!/bin/bash
#
# Script Name: _deskflow_client (Simplified)
# Purpose: Launches the Deskflow client Flatpak application, dynamically
#          determining the target DISPLAY using the _find_display script.
# Usage:
#   - Ensure DESKFLOW_SERVER_IP environment variable is set.
#   - If targeting the login screen (DISPLAY :0), ensure _xauth_for_login_screen
#     has been run successfully in the current SSH session first.
#   - Run this script to start the client. Run again after graphical login
#     (targeting DISPLAY :1 or similar) if needed.
# Dependencies:
#   - _find_display script (expected in same directory or PATH).
#   - DESKFLOW_SERVER_IP environment variable.
#   - org.deskflow.deskflow Flatpak installed.
# Style: Google Shell Style Guide compliant

# Exit immediately if a command exits with a non-zero status.
set -o errexit
# Treat unset variables as an error when substituting.
set -o nounset
# Prevent errors in a pipeline from being masked.
set -o pipefail

# Store the script's base name for use in messages.
readonly SCRIPT_NAME="${0##*/}"
# Get the directory where the script itself resides to find helpers.
readonly SCRIPT_DIR="$(dirname "$0")"

# --- Configuration ---
# Path to the utility script that finds the target DISPLAY value.
readonly FIND_DISPLAY_SCRIPT="${SCRIPT_DIR}/_find_display"
# Path to the Deskflow client binary inside the Flatpak sandbox.
readonly DESKFLOW_CLIENT_CMD="/app/bin/deskflow-client"
# Flatpak application ID.
readonly FLATPAK_APP_ID="org.deskflow.deskflow"
# Log file location. Using /tmp allows writing even if run by different users.
# Consider user-specific logs if running manually as 'dwd'.
readonly LOG_FILE="/tmp/deskflow-client.log"
# --- End Configuration ---

# Function for standardized error messages and exit.
# Arguments:
#   Error message string.
err_exit() {
  local timestamp
  timestamp=$(date +'%Y-%m-%dT%H:%M:%S%z') # ISO 8601 Format
  # Log error to file first.
  echo "${timestamp}: [${SCRIPT_NAME} ERROR] ${1}" >>"${LOG_FILE}"
  # Also print error to stderr for immediate feedback.
  echo "[${SCRIPT_NAME} ERROR] ${1}" >&2
  exit 1
}

# Logs informational messages to the log file.
# Arguments:
#   Info message string.
log_info() {
  local timestamp
  timestamp=$(date +'%Y-%m-%dT%H:%M:%S%z')
  echo "${timestamp}: [${SCRIPT_NAME} INFO] ${1}" >>"${LOG_FILE}"
}

# Main execution logic.
main() {
  log_info "--- Starting ${SCRIPT_NAME} ---"

  # 1. Check for required environment variable.
  # Use :- default value syntax to avoid nounset error if DESKFLOW_SERVER_IP is unset.
  if [[ -z "${DESKFLOW_SERVER_IP:-}" ]]; then
    err_exit "Required environment variable DESKFLOW_SERVER_IP is not set or empty."
  fi
  local server_ip="${DESKFLOW_SERVER_IP}"
  log_info "Target Deskflow server IP: ${server_ip}"

  # 2. Determine the target DISPLAY using the helper script.
  if [[ ! -x "${FIND_DISPLAY_SCRIPT}" ]]; then
    err_exit "Helper script not found or not executable: ${FIND_DISPLAY_SCRIPT}"
  fi
  log_info "Running ${FIND_DISPLAY_SCRIPT} to determine target DISPLAY..."
  local target_display
  # Capture output; errexit/pipefail handle errors from the script.
  target_display=$("${FIND_DISPLAY_SCRIPT}")
  log_info "Determined target DISPLAY=${target_display}"

  # 3. Check if Deskflow client might already be running (simple check).
  # This pgrep pattern tries to be specific but might need tuning.
  if pgrep -f "${FLATPAK_APP_ID}.*${DESKFLOW_CLIENT_CMD}.*${server_ip}" >/dev/null; then
    log_info "A process matching the Deskflow client connecting to ${server_ip} appears to be running. Exiting."
    # Exit successfully assuming the running instance is intended.
    exit 0
  fi

  # 4. Prepare and launch the Deskflow client using Flatpak in the background.
  log_info "Launching Deskflow client on DISPLAY=${target_display} connecting to ${server_ip}"

  # Use an array for the command and arguments for robustness.
  local flatpak_cmd_args=(
    run
    "--command=${DESKFLOW_CLIENT_CMD}"
    "${FLATPAK_APP_ID}"
    --no-daemon
    --enable-crypto
    "${server_ip}"
  )

  # Execute the command with the determined DISPLAY environment variable.
  # Run in background (&) and redirect both stdout & stderr to the log file.
  DISPLAY="${target_display}" flatpak "${flatpak_cmd_args[@]}" >>"${LOG_FILE}" 2>&1 &

  # Capture PID of the background process.
  local client_pid=$!
  # Disown the process so it doesn't get killed if the parent shell (e.g., SSH) exits.
  disown "${client_pid}"

  log_info "Deskflow client launched in background (PID: ${client_pid}). Output/errors logged to ${LOG_FILE}"
  log_info "--- ${SCRIPT_NAME} finished ---"
}

# Execute the main function, passing script arguments (if any).
main "$@"

# Exit explicitly with success status.
exit 0
